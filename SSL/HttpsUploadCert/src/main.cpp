/* Revision: 3.2.0 */

/******************************************************************************
* Copyright 1998-2020 NetBurner, Inc.  ALL RIGHTS RESERVED
*
*    Permission is hereby granted to purchasers of NetBurner Hardware to use or
*    modify this computer program for any use as long as the resultant program
*    is only executed on NetBurner provided hardware.
*
*    No other rights to use this program or its derivatives in part or in
*    whole are granted.
*
*    It may be possible to license this or other NetBurner software for use on
*    non-NetBurner Hardware. Contact sales@Netburner.com for more information.
*
*    NetBurner makes no representation or warranties with respect to the
*    performance of this computer program, and specifically disclaims any
*    responsibility for any damages, special or consequential, connected with
*    the use of this program.
*
* NetBurner
* 5405 Morehouse Dr.
* San Diego, CA 92121
* www.netburner.com
******************************************************************************/

#include <hal.h>
#include <init.h>
#include <nbtime.h>
#include <netbios.h>
#include <netinterface.h>

// NB SSL library
#include <crypto/ssl.h>

//#include <syslog.h>
#define SysLog(...) (void)0;

// Product Definitions
#include "nbfactory.h"

// Ethernet to Serial Application Definitions
#include "serialburnerdata.h"

// SSL User Routines
#include "ssluser.h"

// NB EFFS-STD library
#include "effs_std.h"
#include "effs_time.h"

void RescanCACerts();

extern const char *default_page;   // Default HTTP startup page
extern void DisplayNvSettings(void);

const char FirmwareVersion[] = NB_FACTORY_MODULE_BASE_NAME NB_FACTORY_FEATURE_NAME __DATE__ " OS:" NB_VERSION_TEXT " ";
BOOL bShowDebug = 0;   // Debug display flag

extern MonitorRecord monitor_config;

/*-----------------------------------------------------------------------------
 * Display debug commands
 *----------------------------------------------------------------------------*/
void DisplayDebugMenu()
{
    iprintf("\r\nDebug commands :\r\n");
    iprintf("0 Debug messages off\r\n");
    iprintf("1 Debug messages on\r\n");
    iprintf("D reset to factory default parameters\r\n");
    iprintf("F show file system info\r\n");
    iprintf("G format file system - caution!\r\n");
    iprintf("N display NV Settings\r\n");
    iprintf("T display system time\r\n");
}

/*-----------------------------------------------------------------------------
 * Process debug commands
 *----------------------------------------------------------------------------*/
extern void SetDefaults();

void ProcessDebugCommand(char c)
{
    switch (toupper(c))
    {
        case '0':
            bShowDebug = FALSE;
            debug_iprintf("Debug is off\r\n");
            break;
        case '1':
            bShowDebug = TRUE;
            debug_iprintf("Debug is on\r\n");
            break;
        case 'B': ForceReboot(); break;
        case 'D':
            debug_iprintf("Setting default values\r\n");
            SetDefaults();
            break;
        case 'F':
            EffsListCurrentDirectory(NV_Settings.DeviceName);
            EffsDisplayStatistics(NV_Settings.DeviceName);
            break;
        case 'G': EffsFormat(); break;
        case 'N': DisplayNvSettings(); break;
        case 'T':
            DisplaySystemTime();   // Display current system date and time
            iprintf("\r\n");
            break;
        default: DisplayDebugMenu();
    }
}

// Application name
const char *AppName = NB_FACTORY_MODULE_BASE_NAME NB_FACTORY_FEATURE_NAME " " NB_FACTORY_FEATURE_DESC;

/*-----------------------------------------------------------------------------
 * Main task
 *-----------------------------------------------------------------------------*/
void UserMain(void *notUsedPtr)
{
    init();
    WaitForActiveNetwork(TICKS_PER_SECOND * 5);   // Wait for DHCP address

    // EFFS-STD
    EffsStart((char *)"EffsStart");

    CheckNVSettings();

    bShowDebug = TRUE;

    if (SetTimeNTP())
    {
        // tzsetchar((char*)"EST5EDT4,M3.2.0/01:00:00,M11.1.0/02:00:00");
        // tzsetchar((char*)"CST6CDT5,M3.2.0/01:00:00,M11.1.0/02:00:00");
        // tzsetchar((char*)"MST7MDT6,M3.2.0/01:00:00,M11.1.0/02:00:00");
        tzsetchar((char *)"PST8PDT7,M3.2.0/01:00:00,M11.1.0/02:00:00");
    }
    else
    {
        iprintf("NTP failed, setting time manually\r\n");
    }
    DisplaySystemTime();
    iprintf("\r\n");

    RescanCACerts();

    SysLog("Starting up\r\n");

    StartHttps();

    default_page = "https.html";

    // Publish NetBIOS name
    NetbiosEnableNameService(NV_Settings.NetBIOSName, TRUE);

    // If we don't have any certs loaded already, load up the permanent autogenerated ones
    if (NV_Settings.SslCertificateSource == SERIAL_BURNER_LIBRARY_DEFAULT)
    {
        iprintf("Setting defaults\r\n");
        SetDefaults();
        SaveUserParameters(&NV_Settings, sizeof(NV_Settings));
    }

    // Display product name
    if (!monitor_config.Quiet)
    {
        iprintf("%s : ", NV_Settings.DeviceName);
        iprintf("Product->    %s%s", NB_FACTORY_MODULE_BASE_NAME, NB_FACTORY_FEATURE_NAME);
        iprintf(" %s\r\n", NB_FACTORY_FEATURE_DESC);
    }

    boot_iprintf("Device->     %s", NV_Settings.DeviceName);
    InterfaceBlock *pifb = GetInterfaceBlock();
    if ((pifb != nullptr) && (!monitor_config.Quiet == 0))
    {
        iprintf("%s : ", NV_Settings.DeviceName);
        iprintf("IP Address-> %hI\r\n", pifb->ip4.cur_addr.i4);
    }

    boot_iprintf("Version->    %s", NB_FACTORY_DEFAULTS_VERSION_STRING " Created:" __DATE__);
    debug_iprintf("Settings size->    %ld", sizeof(NV_Settings));
    boot_iprintf("? for debug commands");
    OSTimeDly(TICKS_PER_SECOND / 2);

    // EFFS-STD
    // EffsListCurrentDirectory(NV_Settings.DeviceName);
    // EffsDisplayStatistics(NV_Settings.DeviceName);

    while (1)
    {
        char c = getchar();
        ProcessDebugCommand(c);
    }
}
